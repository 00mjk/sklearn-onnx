.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorial_plot_dbegin_options_list.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_tutorial_plot_dbegin_options_list.py:


Black list operators when converting
====================================

.. index:: black list, white list

Some runtimes do not implement a runtime for every
available operator in ONNX. The converter does not know
that but it is possible to black some operators. Most of
the converters do not change their behaviour, they fail
if they use a black listed operator, a couple of them
produces a different ONNX graph.

.. contents::
    :local:

GaussianMixture
+++++++++++++++

The first converter to change its behaviour depending on a black list
of operators is for model *GaussianMixture*.


.. code-block:: default

    from pyquickhelper.helpgen.graphviz_helper import plot_graphviz
    from mlprodict.onnxrt import OnnxInference
    from timeit import timeit
    import numpy
    from onnxruntime import InferenceSession
    from sklearn.mixture import GaussianMixture
    from sklearn.datasets import load_iris
    from sklearn.model_selection import train_test_split
    from skl2onnx import to_onnx

    data = load_iris()
    X_train, X_test = train_test_split(data.data)
    model = GaussianMixture()
    model.fit(X_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    GaussianMixture()



Default conversion
++++++++++++++++++


.. code-block:: default


    model_onnx = to_onnx(
        model, X_train[:1].astype(numpy.float32),
        options={id(model): {'score_samples': True}},
        target_opset=12)
    sess = InferenceSession(model_onnx.SerializeToString())

    xt = X_test[:5].astype(numpy.float32)
    print(model.score_samples(xt))
    print(sess.run(None, {'X': xt})[2])






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-0.76653223 -6.3564875  -1.99248982 -3.2774902  -2.09152127]
    [[-0.76653147]
     [-6.356486  ]
     [-1.9924893 ]
     [-3.2774916 ]
     [-2.0915217 ]]




Display the ONNX graph.


.. code-block:: default



    oinf = OnnxInference(model_onnx)
    ax = plot_graphviz(oinf.to_dot())
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)




.. image:: /auto_tutorial/images/sphx_glr_plot_dbegin_options_list_001.png
    :alt: plot dbegin options list
    :class: sphx-glr-single-img





Conversion without ReduceLogSumExp
++++++++++++++++++++++++++++++++++

Parameter *black_op* is used to tell the converter
not to use this operator. Let's see what the converter
produces in that case.


.. code-block:: default


    model_onnx2 = to_onnx(
        model, X_train[:1].astype(numpy.float32),
        options={id(model): {'score_samples': True}},
        black_op={'ReduceLogSumExp'},
        target_opset=12)
    sess2 = InferenceSession(model_onnx2.SerializeToString())

    xt = X_test[:5].astype(numpy.float32)
    print(model.score_samples(xt))
    print(sess2.run(None, {'X': xt})[2])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-0.76653223 -6.3564875  -1.99248982 -3.2774902  -2.09152127]
    [[-0.76653147]
     [-6.356486  ]
     [-1.9924893 ]
     [-3.2774916 ]
     [-2.0915217 ]]




Display the ONNX graph.


.. code-block:: default


    oinf = OnnxInference(model_onnx2)
    ax = plot_graphviz(oinf.to_dot())
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)





.. image:: /auto_tutorial/images/sphx_glr_plot_dbegin_options_list_002.png
    :alt: plot dbegin options list
    :class: sphx-glr-single-img





Processing time
+++++++++++++++


.. code-block:: default


    print(timeit(stmt="sess.run(None, {'X': xt})",
                 number=10000, globals={'sess': sess, 'xt': xt}))

    print(timeit(stmt="sess2.run(None, {'X': xt})",
                 number=10000, globals={'sess2': sess2, 'xt': xt}))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.3016368239186704
    27.829851979389787




The model using ReduceLogSumExp is much faster.

If the converter cannot convert without...
++++++++++++++++++++++++++++++++++++++++++

Many converters do not consider the white and black lists
of operators. If a converter fails to convert without using
a blacklisted operator (or only whitelisted operators),
*skl2onnx* raises an error.


.. code-block:: default


    try:
        to_onnx(
            model, X_train[:1].astype(numpy.float32),
            options={id(model): {'score_samples': True}},
            black_op={'ReduceLogSumExp', 'Add'},
            target_opset=12)
    except RuntimeError as e:
        print('Error:', e)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Error: Operator 'Add' is black listed.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.757 seconds)


.. _sphx_glr_download_auto_tutorial_plot_dbegin_options_list.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: /../../cus/lib/python3.7/site-packages/sphinx_gallery/_static/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/microsoft/skl2onnx/master?urlpath=lab/tree/notebooks/auto_tutorial/plot_dbegin_options_list.ipynb
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_dbegin_options_list.py <plot_dbegin_options_list.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_dbegin_options_list.ipynb <plot_dbegin_options_list.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
