.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_pipeline.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_pipeline.py:


Draw a pipeline
===============

There is no other way to look into one model stored
in ONNX format than looking into its node with
*onnx*. This example demonstrates
how to draw a model and to retrieve it in *json*
format.

.. contents::
    :local:

Retrieve a model in JSON format
+++++++++++++++++++++++++++++++

That's the most simple way.


.. code-block:: default


    import skl2onnx
    import onnxruntime
    import sklearn
    import numpy
    import matplotlib.pyplot as plt
    import os
    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    from onnx import ModelProto
    import onnx

    from skl2onnx.algebra.onnx_ops import OnnxAdd, OnnxMul

    onnx_fct = OnnxAdd(OnnxMul('X', numpy.array([2], dtype=numpy.float32)),
                       numpy.array([[1, 0], [0, 1]], dtype=numpy.float32),
                       output_names=['Y'])

    X = numpy.array([[4, 5], [-2, 3]], dtype=numpy.float32)
    model = onnx_fct.to_onnx({'X': X})
    print(model)

    filename = "example1.onnx"
    with open(filename, "wb") as f:
        f.write(model.SerializeToString())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ir_version: 3
    producer_name: "skl2onnx"
    producer_version: "1.7.1"
    domain: "ai.onnx"
    model_version: 0
    graph {
      node {
        input: "X"
        input: "Mu_Mulcst"
        output: "Mu_C0"
        name: "Mu_Mul"
        op_type: "Mul"
        domain: ""
      }
      node {
        input: "Mu_C0"
        input: "Ad_Addcst"
        output: "Y"
        name: "Ad_Add"
        op_type: "Add"
        domain: ""
      }
      name: "OnnxAdd"
      initializer {
        dims: 1
        data_type: 1
        float_data: 2.0
        name: "Mu_Mulcst"
      }
      initializer {
        dims: 2
        dims: 2
        data_type: 1
        float_data: 1.0
        float_data: 0.0
        float_data: 0.0
        float_data: 1.0
        name: "Ad_Addcst"
      }
      input {
        name: "X"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
              }
              dim {
                dim_value: 2
              }
            }
          }
        }
      }
      output {
        name: "Y"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
                dim_value: 2
              }
              dim {
                dim_value: 2
              }
            }
          }
        }
      }
    }
    opset_import {
      domain: ""
      version: 7
    }





Draw a model with ONNX
++++++++++++++++++++++
We use `net_drawer.py
<https://github.com/onnx/onnx/blob/master/onnx/tools/net_drawer.py>`_
included in *onnx* package.
We use *onnx* to load the model
in a different way than before.


.. code-block:: default



    model = ModelProto()
    with open(filename, 'rb') as fid:
        content = fid.read()
        model.ParseFromString(content)








We convert it into a graph.


.. code-block:: default

    pydot_graph = GetPydotGraph(model.graph, name=model.graph.name, rankdir="TB",
                                node_producer=GetOpNodeProducer("docstring"))
    pydot_graph.write_dot("graph.dot")








Then into an image


.. code-block:: default

    os.system('dot -O -Tpng graph.dot')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0



Which we display...


.. code-block:: default

    image = plt.imread("graph.dot.png")
    plt.imshow(image)
    plt.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_pipeline_001.png
    :alt: plot pipeline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-0.5, 380.5, 602.5, -0.5)



**Versions used for this example**


.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", onnxruntime.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.19.1
    scikit-learn: 0.23.2
    onnx:  1.7.0
    onnxruntime:  1.4.0
    skl2onnx:  1.7.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.281 seconds)


.. _sphx_glr_download_auto_examples_plot_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: /../../cus/lib/python3.7/site-packages/sphinx_gallery/_static/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/microsoft/skl2onnx/master?urlpath=lab/tree/notebooks/auto_examples/plot_pipeline.ipynb
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline.py <plot_pipeline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline.ipynb <plot_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
