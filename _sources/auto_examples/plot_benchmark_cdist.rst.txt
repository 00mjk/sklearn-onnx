.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark_cdist.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_benchmark_cdist.py:


.. _l-benchmark-cdist:

Compare CDist with scipy
========================

The following example focuses on one particular operator,
CDist and compares its execution time between
*onnxruntime* and *scipy*.

.. contents::
    :local:

ONNX Graph with CDist
+++++++++++++++++++++

`cdist <https://docs.scipy.org/doc/scipy/reference/
generated/scipy.spatial.distance.cdist.html>`_
function computes pairwise distances.


.. code-block:: default

    from pprint import pprint
    from timeit import Timer
    import numpy as np
    from scipy.spatial.distance import cdist
    from tqdm import tqdm
    from pandas import DataFrame
    import onnx
    import onnxruntime as rt
    from onnxruntime import InferenceSession
    import skl2onnx
    from skl2onnx.algebra.custom_ops import OnnxCDist
    from skl2onnx.common.data_types import FloatTensorType

    X = np.ones((2, 4), dtype=np.float32)
    Y = np.ones((3, 4), dtype=np.float32)
    Y *= 2
    print(cdist(X, Y, metric='euclidean'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2. 2. 2.]
     [2. 2. 2.]]




ONNX


.. code-block:: default


    op = OnnxCDist('X', 'Y', op_version=12, output_names=['Z'],
                   metric='euclidean')
    onx = op.to_onnx({'X': X, 'Y': Y},
                     outputs=[('Z', FloatTensorType())])
    print(onx)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ir_version: 7
    producer_name: "skl2onnx"
    producer_version: "1.7.1"
    domain: "ai.onnx"
    model_version: 0
    graph {
      node {
        input: "X"
        input: "Y"
        output: "Z"
        name: "CD_CDist"
        op_type: "CDist"
        attribute {
          name: "metric"
          s: "euclidean"
          type: STRING
        }
        domain: "com.microsoft"
      }
      name: "OnnxCDist"
      input {
        name: "X"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
              }
              dim {
                dim_value: 4
              }
            }
          }
        }
      }
      input {
        name: "Y"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
              }
              dim {
                dim_value: 4
              }
            }
          }
        }
      }
      output {
        name: "Z"
        type {
          tensor_type {
            elem_type: 1
          }
        }
      }
    }
    opset_import {
      domain: "com.microsoft"
      version: 1
    }





CDist and onnxruntime
+++++++++++++++++++++

We compute the output of CDist operator
with onnxruntime.


.. code-block:: default


    sess = InferenceSession(onx.SerializeToString())
    res = sess.run(None, {'X': X, 'Y': Y})
    print(res)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[1.9999999, 1.9999999, 1.9999999],
           [1.9999999, 2.       , 2.       ]], dtype=float32)]




Benchmark
+++++++++

Let's compare onnxruntime and scipy.


.. code-block:: default



    def measure_time(name, stmt, context, repeat=100, number=20):
        tim = Timer(stmt, globals=context)
        res = np.array(
            tim.repeat(repeat=repeat, number=number))
        res /= number
        mean = np.mean(res)
        dev = np.mean(res ** 2)
        dev = (dev - mean**2) ** 0.5
        return dict(
            average=mean, deviation=dev, min_exec=np.min(res),
            max_exec=np.max(res), repeat=repeat, number=number,
            nrows=context['X'].shape[0], ncols=context['Y'].shape[1],
            name=name)









scipy


.. code-block:: default


    time_scipy = measure_time(
        "scipy", "cdist(X, Y)",
        context={'cdist': cdist, 'X': X, 'Y': Y})
    pprint(time_scipy)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'average': 1.871969783678651e-05,
     'deviation': 2.077932281562963e-07,
     'max_exec': 1.9706436432898045e-05,
     'min_exec': 1.853120047599077e-05,
     'name': 'scipy',
     'ncols': 4,
     'nrows': 2,
     'number': 20,
     'repeat': 100}




onnxruntime


.. code-block:: default


    time_ort = measure_time(
        "ort", "sess.run(None, {'X': X, 'Y': Y})",
        context={'sess': sess, 'X': X, 'Y': Y})
    pprint(time_ort)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'average': 1.5173771884292362e-05,
     'deviation': 3.371901368640062e-07,
     'max_exec': 1.760020386427641e-05,
     'min_exec': 1.49998115375638e-05,
     'name': 'ort',
     'ncols': 4,
     'nrows': 2,
     'number': 20,
     'repeat': 100}




Longer benchmark


.. code-block:: default


    metrics = []
    for dim in tqdm([10, 100, 1000, 10000]):
        # We cannot change the number of column otherwise
        # we need to create a new graph.
        X = np.random.randn(dim, 4).astype(np.float32)
        Y = np.random.randn(10, 4).astype(np.float32)

        time_scipy = measure_time(
            "scipy", "cdist(X, Y)",
            context={'cdist': cdist, 'X': X, 'Y': Y})
        time_ort = measure_time(
            "ort", "sess.run(None, {'X': X, 'Y': Y})",
            context={'sess': sess, 'X': X, 'Y': Y})
        metric = dict(N=dim, scipy=time_scipy['average'],
                      ort=time_ort['average'])
        metrics.append(metric)

    df = DataFrame(metrics)
    df['scipy/ort'] = df['scipy'] / df['ort']
    print(df)

    df.plot(x='N', y=['scipy/ort'])




.. image:: /auto_examples/images/sphx_glr_plot_benchmark_cdist_001.png
    :alt: plot benchmark cdist
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     50%|#####     | 2/4 [00:00<00:00, 12.71it/s]     75%|#######5  | 3/4 [00:00<00:00,  8.26it/s]    100%|##########| 4/4 [00:04<00:00,  1.33s/it]    100%|##########| 4/4 [00:04<00:00,  1.13s/it]
           N     scipy       ort  scipy/ort
    0     10  0.000020  0.000015   1.269472
    1    100  0.000025  0.000018   1.350016
    2   1000  0.000070  0.000039   1.764336
    3  10000  0.000496  0.001580   0.313807




**Versions used for this example**


.. code-block:: default


    print("numpy:", np.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.19.1
    onnx:  1.7.0
    onnxruntime:  1.4.0
    skl2onnx:  1.7.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.947 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_cdist.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: /../../cus/lib/python3.7/site-packages/sphinx_gallery/_static/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/microsoft/skl2onnx/master?urlpath=lab/tree/notebooks/auto_examples/plot_benchmark_cdist.ipynb
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_benchmark_cdist.py <plot_benchmark_cdist.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_benchmark_cdist.ipynb <plot_benchmark_cdist.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
