.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_custom_parser_alternative.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_custom_parser_alternative.py:


.. _l-custom-parser-alternative:

When a custom model is neither a classifier nor a regressor (alternative)
=========================================================================

.. note::
    This example rewrites :ref:`l-custom-parser` by using
    the syntax proposed in example :ref:`l-onnx-operators`
    to write the custom converter, shape calculator and parser.

*scikit-learn*'s API specifies that a regressor produces one
outputs and a classifier produces two
outputs, predicted labels and probabilities. The goal here is
to add a third result which tells if the probability is
above a given threshold. That's implemented in method
*validate*.

.. contents::
    :local:

Iris and scoring
++++++++++++++++

A new class is created, it trains any classifier and implements
the method *validate* mentioned above.


.. code-block:: default

    import inspect
    import numpy as np
    import onnx
    import sklearn
    from sklearn.base import ClassifierMixin, BaseEstimator, clone
    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split
    from skl2onnx import update_registered_converter
    import os
    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    import onnxruntime as rt
    from skl2onnx import to_onnx, get_model_alias, __version__
    from skl2onnx.proto import onnx_proto
    from skl2onnx.common.data_types import FloatTensorType, Int64TensorType
    from skl2onnx.algebra.onnx_ops import (
        OnnxGreater, OnnxCast, OnnxReduceMax, OnnxIdentity
    )
    from skl2onnx.algebra.onnx_operator import OnnxSubEstimator
    import matplotlib.pyplot as plt


    class ValidatorClassifier(BaseEstimator, ClassifierMixin):

        def __init__(self, estimator=None, threshold=0.75):
            ClassifierMixin.__init__(self)
            BaseEstimator.__init__(self)
            if estimator is None:
                estimator = LogisticRegression(solver='liblinear')
            self.estimator = estimator
            self.threshold = threshold

        def fit(self, X, y, sample_weight=None):
            sig = inspect.signature(self.estimator.fit)
            if 'sample_weight' in sig.parameters:
                self.estimator_ = clone(self.estimator).fit(
                    X, y, sample_weight=sample_weight)
            else:
                self.estimator_ = clone(self.estimator).fit(X, y)
            return self

        def predict(self, X):
            return self.estimator_.predict(X)

        def predict_proba(self, X):
            return self.estimator_.predict_proba(X)

        def validate(self, X):
            pred = self.predict_proba(X)
            mx = pred.max(axis=1)
            return (mx >= self.threshold) * 1


    data = load_iris()
    X, y = data.data, data.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)

    model = ValidatorClassifier()
    model.fit(X_train, y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ValidatorClassifier(estimator=LogisticRegression(solver='liblinear'))



Let's now measure the indicator which tells
if the probability of a prediction is above
a threshold.


.. code-block:: default


    print(model.validate(X_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1 1
     1]




Conversion to ONNX
+++++++++++++++++++

The conversion fails for a new model because
the library does not know any converter associated
to this new model.


.. code-block:: default


    try:
        to_onnx(model, X_train[:1].astype(np.float32),
                target_opset=12)
    except RuntimeError as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Unable to find a shape calculator for type '<class '__main__.ValidatorClassifier'>'.
    It usually means the pipeline being converted contains a
    transformer or a predictor with no corresponding converter
    implemented in sklearn-onnx. If the converted is implemented
    in another library, you need to register
    the converted so that it can be used by sklearn-onnx (function
    update_registered_converter). If the model is not yet covered
    by sklearn-onnx, you may raise an issue to
    https://github.com/onnx/sklearn-onnx/issues
    to get the converter implemented or even contribute to the
    project. If the model is a custom model, a new converter must
    be implemented. Examples can be found in the gallery.





Custom converter
++++++++++++++++

We reuse some pieces of code from :ref:`l-custom-model`.
The shape calculator defines the shape of every output
of the converted model.


.. code-block:: default



    def validator_classifier_shape_calculator(operator):

        input0 = operator.inputs[0]     # first input in ONNX graph
        outputs = operator.outputs      # outputs in ONNX graph
        op = operator.raw_operator      # scikit-learn model (mmust be fitted)
        if len(outputs) != 3:
            raise RuntimeError("3 outputs expected not {}.".format(len(outputs)))

        N = input0.type.shape[0]                    # number of observations
        C = op.estimator_.classes_.shape[0]         # dimension of outputs

        outputs[0].type = Int64TensorType([N])      # label
        outputs[1].type = FloatTensorType([N, C])   # probabilities
        outputs[2].type = Int64TensorType([C])      # validation








Then the converter.


.. code-block:: default



    def validator_classifier_converter(scope, operator, container):
        input0 = operator.inputs[0]         # first input in ONNX graph
        outputs = operator.outputs          # outputs in ONNX graph
        op = operator.raw_operator          # scikit-learn model (mmust be fitted)
        opv = container.target_opset

        # The model calls another one. The class `OnnxSubEstimator`
        # calls the converter for this operator.
        model = op.estimator_
        onnx_op = OnnxSubEstimator(model, input0, op_version=opv)

        rmax = OnnxReduceMax(onnx_op[1], axes=[1], keepdims=0, op_version=opv)
        great = OnnxGreater(rmax, np.array([op.threshold], dtype=np.float32),
                            op_version=opv)
        valid = OnnxCast(great, to=onnx_proto.TensorProto.INT64,
                         op_version=opv)

        r1 = OnnxIdentity(onnx_op[0], output_names=[outputs[0].full_name],
                          op_version=opv)
        r2 = OnnxIdentity(onnx_op[1], output_names=[outputs[1].full_name],
                          op_version=opv)
        r3 = OnnxIdentity(valid, output_names=[outputs[2].full_name],
                          op_version=opv)

        r1.add_to(scope, container)
        r2.add_to(scope, container)
        r3.add_to(scope, container)









Then the registration.


.. code-block:: default



    update_registered_converter(ValidatorClassifier, 'CustomValidatorClassifier',
                                validator_classifier_shape_calculator,
                                validator_classifier_converter)








And conversion...


.. code-block:: default


    try:
        to_onnx(model, X_test[:1].astype(np.float32),
                target_opset=12)
    except RuntimeError as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    3 outputs expected not 2.




It fails because the library expected the model
to behave like a classifier which produces two
outputs. We need to add a custom parser to
tell the library this model produces three outputs.

Custom parser
+++++++++++++


.. code-block:: default



    def validator_classifier_parser(scope, model, inputs, custom_parsers=None):
        alias = get_model_alias(type(model))
        this_operator = scope.declare_local_operator(alias, model)

        # inputs
        this_operator.inputs.append(inputs[0])

        # outputs
        val_label = scope.declare_local_variable('val_label', Int64TensorType())
        val_prob = scope.declare_local_variable('val_prob', FloatTensorType())
        val_val = scope.declare_local_variable('val_val', Int64TensorType())
        this_operator.outputs.append(val_label)
        this_operator.outputs.append(val_prob)
        this_operator.outputs.append(val_val)

        # ends
        return this_operator.outputs








Registration.


.. code-block:: default



    update_registered_converter(ValidatorClassifier, 'CustomValidatorClassifier',
                                validator_classifier_shape_calculator,
                                validator_classifier_converter,
                                parser=validator_classifier_parser)








And conversion again.


.. code-block:: default


    model_onnx = to_onnx(model, X_test[:1].astype(np.float32),
                         target_opset=12)








Final test
++++++++++

We need now to check the results are the same with ONNX.


.. code-block:: default


    X32 = X_test[:5].astype(np.float32)

    sess = rt.InferenceSession(model_onnx.SerializeToString())
    results = sess.run(None, {'X': X32})

    print("--labels--")
    print("sklearn", model.predict(X32))
    print("onnx", results[0])
    print("--probabilities--")
    print("sklearn", model.predict_proba(X32))
    print("onnx", results[1])
    print("--validation--")
    print("sklearn", model.validate(X32))
    print("onnx", results[2])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --labels--
    sklearn [2 1 1 2 2]
    onnx [2 1 1 2 2]
    --probabilities--
    sklearn [[2.47242971e-05 4.26262643e-01 5.73712632e-01]
     [1.68001194e-02 6.31331745e-01 3.51868136e-01]
     [3.90343968e-02 6.45165212e-01 3.15800391e-01]
     [6.82773660e-04 2.31095290e-01 7.68221937e-01]
     [2.92554785e-04 1.82745049e-01 8.16962396e-01]]
    onnx [[2.4699006e-05 4.2626265e-01 5.7371265e-01]
     [1.6800139e-02 6.3133174e-01 3.5186815e-01]
     [3.9034408e-02 6.4516515e-01 3.1580046e-01]
     [6.8277807e-04 2.3109525e-01 7.6822197e-01]
     [2.9259056e-04 1.8274499e-01 8.1696236e-01]]
    --validation--
    sklearn [0 0 0 1 1]
    onnx [0 0 0 1 1]




It looks good.

Display the ONNX graph
++++++++++++++++++++++


.. code-block:: default


    pydot_graph = GetPydotGraph(
        model_onnx.graph, name=model_onnx.graph.name, rankdir="TB",
        node_producer=GetOpNodeProducer(
            "docstring", color="yellow", fillcolor="yellow", style="filled"))
    pydot_graph.write_dot("validator_classifier.dot")

    os.system('dot -O -Gdpi=300 -Tpng validator_classifier.dot')

    image = plt.imread("validator_classifier.dot.png")
    fig, ax = plt.subplots(figsize=(40, 20))
    ax.imshow(image)
    ax.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_custom_parser_alternative_001.png
    :alt: plot custom parser alternative
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-0.5, 5089.5, 2646.5, -0.5)



**Versions used for this example**


.. code-block:: default


    print("numpy:", np.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", __version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.19.1
    scikit-learn: 0.23.2
    onnx:  1.7.0
    onnxruntime:  1.4.0
    skl2onnx:  1.7.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.967 seconds)


.. _sphx_glr_download_auto_examples_plot_custom_parser_alternative.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: /../../cus/lib/python3.7/site-packages/sphinx_gallery/_static/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/microsoft/skl2onnx/master?urlpath=lab/tree/notebooks/auto_examples/plot_custom_parser_alternative.ipynb
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_custom_parser_alternative.py <plot_custom_parser_alternative.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_custom_parser_alternative.ipynb <plot_custom_parser_alternative.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
