.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark_pipeline.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_pipeline.py:


Benchmark a pipeline
====================

The following example checks up on every step in a pipeline,
compares and benchmarks the predictions.

.. contents::
    :local:

Create a pipeline
+++++++++++++++++

We reuse the pipeline implemented in example
`Pipelining: chaining a PCA and a logistic regression
<https://scikit-learn.org/stable/auto_examples/compose/plot_digits_pipe.html>`_.
There is one change because
`ONNX-ML Imputer <https://github.com/onnx/onnx/blob/master/
docs/Operators-ml.md#ai.onnx.ml.Imputer>`_
does not handle string type. This cannot be part of the final ONNX pipeline
and must be removed. Look for comment starting with ``---`` below.

.. code-block:: default

    import skl2onnx
    import onnxruntime
    import onnx
    import sklearn
    import numpy
    from skl2onnx.helpers import collect_intermediate_steps
    from timeit import timeit
    from skl2onnx.helpers import compare_objects
    import onnxruntime as rt
    from onnxconverter_common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    import numpy as np
    import pandas as pd

    from sklearn import datasets
    from sklearn.decomposition import PCA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import Pipeline

    logistic = LogisticRegression()
    pca = PCA()
    pipe = Pipeline(steps=[('pca', pca), ('logistic', logistic)])

    digits = datasets.load_digits()
    X_digits = digits.data[:1000]
    y_digits = digits.target[:1000]

    pipe.fit(X_digits, y_digits)







Conversion to ONNX
++++++++++++++++++


.. code-block:: default



    initial_types = [('input', FloatTensorType((None, X_digits.shape[1])))]
    model_onnx = convert_sklearn(pipe, initial_types=initial_types)

    sess = rt.InferenceSession(model_onnx.SerializeToString())
    print("skl predict_proba")
    print(pipe.predict_proba(X_digits[:2]))
    onx_pred = sess.run(None, {'input': X_digits[:2].astype(np.float32)})[1]
    df = pd.DataFrame(onx_pred)
    print("onnx predict_proba")
    print(df.values)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    skl predict_proba
    [[9.99998536e-01 5.99063479e-19 3.48549126e-10 1.55765795e-08
      3.32559886e-10 1.21314713e-06 3.98960088e-08 1.22513886e-07
      2.23871285e-08 4.98148609e-08]
     [1.47648489e-14 9.99999301e-01 1.05811969e-10 7.49298736e-13
      2.48627451e-07 8.75686333e-12 5.39025168e-11 2.95899959e-11
      4.50528975e-07 1.30607525e-13]]
    onnx predict_proba
    [[9.99998569e-01 5.99062553e-19 3.48550383e-10 1.55766511e-08
      3.32561811e-10 1.21315372e-06 3.98961184e-08 1.22514706e-07
      2.23872050e-08 4.98151529e-08]
     [1.47648397e-14 9.99999285e-01 1.05811790e-10 7.49297488e-13
      2.48627401e-07 8.75682166e-12 5.39023409e-11 2.95899520e-11
      4.50527779e-07 1.30607344e-13]]


Comparing outputs
+++++++++++++++++


.. code-block:: default


    compare_objects(pipe.predict_proba(X_digits[:2]), onx_pred)
    # No exception so they are the same.







Benchmarks
++++++++++


.. code-block:: default


    print("scikit-learn")
    print(timeit("pipe.predict_proba(X_digits[:1])",
                 number=10000, globals=globals()))
    print("onnxruntime")
    print(timeit("sess.run(None, {'input': X_digits[:1].astype(np.float32)})[1]",
                 number=10000, globals=globals()))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scikit-learn
    1.4207464000000005
    onnxruntime
    0.27274200000000093


Intermediate steps
++++++++++++++++++

Let's imagine the final output is wrong and we need
to look into each component of the pipeline which one
is failing. The following method modifies the scikit-learn
pipeline to steal the intermediate outputs and produces
an smaller ONNX graph for every operator.


.. code-block:: default



    steps = collect_intermediate_steps(pipe, "pipeline",
                                       initial_types)

    assert len(steps) == 2

    pipe.predict_proba(X_digits[:2])

    for i, step in enumerate(steps):
        onnx_step = step['onnx_step']
        sess = rt.InferenceSession(onnx_step.SerializeToString())
        onnx_outputs = sess.run(None, {'input': X_digits[:2].astype(np.float32)})
        skl_outputs = step['model']._debug.outputs
        if 'transform' in skl_outputs:
            compare_objects(skl_outputs['transform'], onnx_outputs[0])
            print("benchmark", step['model'].__class__)
            print("scikit-learn")
            print(timeit("step['model'].transform(X_digits[:1])",
                         number=10000, globals=globals()))
        else:
            compare_objects(skl_outputs['predict_proba'], onnx_outputs[1])
            print("benchmark", step['model'].__class__)
            print("scikit-learn")
            print(timeit("step['model'].predict_proba(X_digits[:1])",
                         number=10000, globals=globals()))
        print("onnxruntime")
        print(timeit("sess.run(None, {'input': X_digits[:1].astype(np.float32)})",
                     number=10000, globals=globals()))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    benchmark <class 'sklearn.decomposition._pca.PCA'>
    scikit-learn
    0.49934369999999895
    onnxruntime
    0.1793528000000002
    benchmark <class 'sklearn.linear_model._logistic.LogisticRegression'>
    scikit-learn
    0.929564000000001
    onnxruntime
    0.24979570000000173


**Versions used for this example**


.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", onnxruntime.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.17.0
    scikit-learn: 0.22.dev0
    onnx:  1.6.32
    onnxruntime:  1.0.991
    skl2onnx:  1.5.2



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.801 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_benchmark_pipeline.py <plot_benchmark_pipeline.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_benchmark_pipeline.ipynb <plot_benchmark_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
